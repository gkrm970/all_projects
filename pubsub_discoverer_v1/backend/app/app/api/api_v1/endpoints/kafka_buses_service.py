# generated by fastapi-codegen:
#   filename:  oas3.json
#   timestamp: 2023-01-16T21:44:37+00:00

# pylint: skip-file
from __future__ import annotations
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.api.deps import get_db, get_current_user
from app.schemas.token import TokenPayload
from app.schemas.entity import Bus as FedKafkaSchema
from app.crud.crud_fed_kafkabus import CRUDDevice
import logging
from app.core.config import settings
from tinaa.logger.v1.tinaa_logger import get_app_logger
from app.responses.return_api_responses import unauthorized_responses

API_NAME = "Bus Service"
logger_conf = [
    {
        "handler_name": settings.LOGGER_HANDLER_NAME,
        "log_level": settings.TINAA_LOG_LEVEL,
        "log_format": settings.LOGGER_FORMAT,
        "date_format": settings.LOGGER_DATE_FORMAT,
        "app_code": settings.LOGGER_APP_CODE,
        "app_name": API_NAME,
    }
]
logger = get_app_logger(log_conf=logger_conf, logger_name=API_NAME)

#API_NAME = "Fed_Kafka_Info_Bus"
#logger = logging.getLogger(API_NAME)
#logger.setLevel(logging.DEBUG)
# from typing import List

router = APIRouter()


@router.post("/fed_kafka_bus/insert", status_code=201,responses={**unauthorized_responses})
async def insert_fed_kafka_bus_info(fed_kafka_info:FedKafkaSchema, db: Session = Depends(get_db), current_user: TokenPayload = Depends(get_current_user)):
    
    create_kafka_info = CRUDDevice.create(db=db, obj_in=fed_kafka_info)
    response = {"status": "Record Created","status_code":201}
    logger.info(response)
    return response


@router.put("/fed_kafka_bus/update/{fed_kafka_bus_id}", status_code=201, responses={**unauthorized_responses})
async def update_fed_kafka_bus_info(fed_kafka_bus_id: int,fed_kafka_info: FedKafkaSchema, db: Session = Depends(get_db), current_user: TokenPayload = Depends(get_current_user)):
    
    create_kafka_info = CRUDDevice.update_fed_kafka_info(db=db, fed_kafka_info_id=fed_kafka_bus_id,fed_kafka_info=fed_kafka_info)

    response = {"status": "Record Updated", "status_code": 201}
    logger.info(response)
    return response


@router.get("/fed_kafka_bus/get_by_id/{fed_kafka_bus_id}", status_code=200,responses={**unauthorized_responses})
async def get_data_with_id(fed_kafka_bus_id: int, db: Session = Depends(get_db), current_user: TokenPayload = Depends(get_current_user)):
    fed_kafka_details = CRUDDevice.get_data_by_id(db=db, kafka_bus_info_id=fed_kafka_bus_id)

    if fed_kafka_details is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"No Fed Kafka bus was found with the ID {fed_kafka_bus_id}"
        )

    return fed_kafka_details


@router.get("/fed_kafka_bus/get_by_name/{fed_kafka_bus_name}", status_code=200,responses={**unauthorized_responses})
async def get_data_with_name(fed_kafka_bus_name: str, db: Session = Depends(get_db), current_user: TokenPayload = Depends(get_current_user)):
    fed_kafka_details = CRUDDevice.get_data_by_name(db=db, kafka_bus_name=fed_kafka_bus_name)

    if fed_kafka_details is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"No Fed Kafka bus was found with the name -  {fed_kafka_bus_name}"
        )

    return fed_kafka_details

@router.get("/fed_kafka_bus/all_records", status_code=200,responses={**unauthorized_responses})
async def get_all_records(db: Session = Depends(get_db), current_user: TokenPayload = Depends(get_current_user)):
    get_all_records_fed_kafka_bus = CRUDDevice.get_all_fed_kafka_info(db=db)
    return get_all_records_fed_kafka_bus


@router.delete("/fed_kafka_bus/delete/{fed_kafka_bus_id}",responses={**unauthorized_responses})
async def delete_fed_kafka_bus_info(fed_kafka_bus_id: int, db: Session = Depends(get_db), current_user: TokenPayload = Depends(get_current_user)):
    delete_fed_kafka_data_with_id = CRUDDevice.delete_data_by_id(db=db, kafka_bus_info_id=fed_kafka_bus_id)
    return delete_fed_kafka_data_with_id
