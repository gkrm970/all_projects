# generated by fastapi-codegen:
#   filename:  oas3.json
#   timestamp: 2023-02-23T17:05:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional
from urllib.parse import urlparse
from pydantic import BaseModel, Field, validator
import re


class Data(BaseModel):
    ietf_restconf_data: Optional[Dict[str, Any]] = Field(
        None,
        alias='ietf-restconf:data',
        description='This resource represents the combined configuration and state data resources that can be accessed by a client and cannot be created or deleted by the client. See RESTCONF RFC 8040 for further information.',
    )


class SecProtocol(Enum):
    PLAINTEXT = 'PLAINTEXT'
    SSL = 'SSL'
    SASL_PLAINTEXT = 'SASL_PLAINTEXT'
    SASL_SSL = 'SASL_SSL'


class SaslMechanism(Enum):
    GSSAPI = 'GSSAPI'
    PLAIN = 'PLAIN'
    SCRAM_SHA_256 = 'SCRAM-SHA-256'
    OAUTHBEARER = 'OAUTHBEARER'


class AuthSettings(BaseModel):
#    secProtocol: Optional[SecProtocol] = Field(
#        'PLAINTEXT',
#        description='message bus instance auth protocol: PlAINTEXT/OAUTHBEARER/SCRAM/GSSAPI/kerberos/SASL/SSL/LDAP/keycloak (leaf)',
#    )
#    saslMechanism: Optional[SaslMechanism] = Field('GSSAPI', description='(leaf)')
#    keystoreLocation: Optional[str] = Field(None, description='(leaf)')
#    keystorePassword: Optional[str] = Field(None, description='(leaf)')
#    keyPassword: Optional[str] = Field(None, description='(leaf)')
#    kerberosServiceName: Optional[str] = Field(None, description='(leaf)')
#    principal: Optional[str] = Field(None, description='(leaf)')
#    username: Optional[str] = Field(None, description='(leaf)')
#    password: Optional[str] = Field(None, description='(leaf)')
#    tokenEndpoint: Optional[str] = Field(None, description='(leaf)')
    auth_type: str
    fed_kafka_bus_name: List[str]
    schemaregistry_certificate_location: Optional[str]
    schemaregistry_key_location: Optional[str]
    plaintext_username: Optional[str]
    plaintext_password : Optional[str]
    oauth_access_token:Optional[str]
    oauth_token_type : Optional[str]
    oauth_security_protocol:Optional[str]
    oauth_security_mechanism:Optional[str]
    oauth_URL : Optional[str]
    oauth_client_id : Optional[str]
    oauth_client_secret:Optional[str]
    oauth_expires_in : Optional[str]
    oauth_refresh_token:Optional[str]
    oauth_token_id:Optional[str]
    oauth_user_id:Optional[str]
    oauth_authorization: Optional[str]
    oauth_bearer: Optional[str]
    oauth_scope:Optional[str]
    oauth_audience : Optional[str]
    oauth_issuer : Optional[str]
    oauth_expiration:Optional[str]
    oauth_claim : Optional[str]
    oauth_JWT : Optional[str]
    oauth_refresh:Optional[str]
    scram_salt:Optional[str]
    scram_iteration:Optional[str]
    scram_nonce:Optional[str]
    scram_channel_binding:Optional[str]
    scram_hi:Optional[str]
    scram_hi_calculation:Optional[str]
    scram_client_key:Optional[str]
    scram_server_Key:Optional[str]
    scram_stored_key:Optional[str]
    scram_proof:Optional[str]
    keycloak_realm:Optional[str]
    keycloak_client:Optional[str]
    keycloak_user:Optional[str]
    keycloak_role:Optional[str]
    keycloak_group:Optional[str]
    keycloak_identity_provider:Optional[str]
    keycloak_authenticator:Optional[str]
    keycloak_flow:Optional[str]
    keycloak_scope:Optional[str]
    keycloak_session:Optional[str]
    GSSAPI_authentication_mechanism:Optional[str]
    GSSAPI_service_principal_name:Optional[str]
    GSSAPI_credentials:Optional[str]
    GSSAPI_context:Optional[str]
    GSSAPI_tokens:Optional[str]
    GSSAPI_quality_of_protection:Optional[str]
    GSSAPI_security_context_establishment:Optional[str]
    kerberos_authentication:Optional[str]
    kerberos_tickets:Optional[str]
    kerberos_KDC:Optional[str]
    kerberos_principal:Optional[str]
    kerberos_realm:Optional[str]
    kerberos_service:Optional[str]
    kerberos_keytab:Optional[str]
    kerberos_TGT:Optional[str]
    kerberos_SPN:Optional[str]
    kerberos_GSSAPI:Optional[str]
    sasl_authentication:Optional[str]
    sasl_protocol:Optional[str]
    sasl_mechanism:Optional[str]
    sasl_credential:Optional[str]
    sasl_service:Optional[str]
    sasl_authorization: Optional[str]
    sasl_channel_bindings:Optional[str]
    sasl_security:Optional[str]
    sasl_identity:Optional[str]
    sasl_QOP:Optional[str]
    ssl_truststore_location:Optional[str]
    ssl_truststore_password:Optional[str]
    ssl_keystore_location:Optional[str]
    ssl_keystore_password:Optional[str]
    ssl_key_location: Optional[str]
    ssl_certificate_location: Optional[str] 
    ssl_key_password:Optional[str]
    ssl_endpoint_identification_algorithm:Optional[str]
    ldap_sasl_jaas_config:Optional[str]
    ldap_sasl_mechanism:Optional[str]
    ldap_ssl_truststore_location:Optional[str]
    ldap_ssl_truststore_password:Optional[str]
    ldap_security_protocol:Optional[str]
    ldap_url:Optional[str]
    ldap_user:Optional[str]
    ldap_password:Optional[str]
    created_by: str
    updated_by: str


    @validator('oauth_URL', pre=True)
    def validate_oauth_URL(cls, value):
        if not value:
            raise ValueError('OAuth URL is required')
#        elif not value.startswith('http://'):
#            raise ValueError('OAuth URL should start with http:// or https://')
        return value


    @validator('ssl_key_password', pre=True)
    def validate_ssl_key_password(cls, value):
        if not value:
            raise ValueError('ssl_key_password is required')
        return value

    @validator('ssl_certificate_location', pre=True)
    def validate_ssl_certificate_location(cls, value):
        if not value:
            raise ValueError('ssl_certificate_location is required')
        return value


    @validator('auth_type', pre=True)
    def validate_auth_type(cls, value):
        if not value:
            raise ValueError('auth_type is required')
        return value



class DiscoveryModuleInternalTopicSchemaAssociation(BaseModel):
    #id: Optional[int] = Field(None, description='topic id (leaf)')
    schemas_info_id: Optional[int] = Field(
        None, description='schema id (leaf)'
    )
    kafka_topics_id: Optional[int] = Field(None, description='topic id (leaf)')


class DiscoveryModuleInternalFetchTopicSchemaAssociationEntry(BaseModel):
    schemas_info_id: Optional[int] = Field(
        None, description='schema id (leaf)'
    )
    kafka_topics_id: Optional[int] = Field(None, description='topic id (leaf)')


class SchemaRegistry(BaseModel):
    schema_registry_host: Optional[str] = Field(None, description='Kafka associated schema registry host/IP (leaf)')
    schema_registry_port: Optional[int] = Field(
        None, description='Kafka associated schema registry port. Example value: 8081 (leaf)'
    )
    schema_registry_version: Optional[str] = Field(
        None, description='schema registry version. Example value: 3.3 (leaf)'
    )
    schemaregistry_certificate_location: Optional[str]
    schemaregistry_key_location: Optional[str]
    #schema_registry_auth_type: Optional[str] = Field(
    #    None, description='Associated schema registry authentication id after insterting into auth_type table'
    #)
    #schema_registry_auth_type_id: Optional[int] = Field(
    #    None, description='Associated schema registry authentication id after insterting into auth_type table'
    #)
    # authSettings: Optional[AuthSettings] = Field(None, description='(non-presence)')
    created_by: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    updated_by: Optional[str] = Field(
        None, description='message bus updated by user (leaf)'
    )
    #url: Optional[str] = Field(None, description='schema registry url (leaf)')
    #Port: Optional[int] = Field(
    #    None, description='message bus instance port. Example value: 9092 (leaf)'
    #)
    #version: Optional[str] = Field(
    #    None, description='message bus instance version. Example value: 3.3 (leaf)'
    #)


class Bus(BaseModel):
    #id: Optional[int] = Field(None, description='message bus id (leaf)')
    instance_type: str = Field(
        None, description='message bus type. Example Kafka or RabbitMQ (leaf)',example='Kafka'
    )
    @validator('instance_type')
    def validate_instance_type(cls, instance_type):
        if instance_type == "":
            raise ValueError('Instance_type is Empty Provide instance_type')
        return instance_type

    kafka_host: List[str] = Field(None, description='message bus host name (leaf)',example=["pltf-msgbus.develop.ocp01.toll6.tinaa.tlabs.ca"])
    @validator('kafka_host')
    def kafka_host_not_empty(cls, value):
        if not value or "" in value or value == []:
            raise ValueError('kafka_host should not be an empty list')
        return value

    kafka_port: int = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)',example=9092
    )
    @validator('kafka_port')
    def kafka_port_range(cls, value):
        if value < 1 or value > 65535:
            raise ValueError('kafka_port should be between 1 and 65535')
        return value

    kafka_version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )
    @validator('kafka_version')
    def kafka_version_empty(cls, value):
        if not value:
            raise ValueError('kafka_version should not be empty')
        return value
    kafka_auth_type: Optional[str] = Field(
        None, description='Associated Kafka authentication id after insterting into auth_type table', example='None'
    )
    @validator('kafka_auth_type')
    def validate_kafka_auth_type(cls, kafka_auth_type):
        if kafka_auth_type == "":
            raise ValueError('kafka_auth_type is Empty Provide kafka_auth_type')
        return kafka_auth_type


    schema_registry_host: Optional[str] = Field(None, description='Kafka associated schema registry host/IP (leaf)')
    schema_registry_port: Optional[int] = Field(
        None, description='Kafka associated schema registry port. Example value: 8081 (leaf)'
    )
    schema_registry_version: Optional[str] = Field(
        None, description='schema registry version. Example value: 3.3 (leaf)'
    )
    #schema_registry_auth_type: Optional[str] = Field(
    #    None, description='Associated schema registry authentication id after insterting into auth_type table'
    #)
    schemaregistry_certificate_location: Optional[str]
    schemaregistry_key_location: Optional[str]    
    created_by: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    updated_by: Optional[str] = Field(
        None, description='message bus updated by user (leaf)'
    )
    def __init__(self, **data):
        if not data:
            raise ValueError('body should not be empty')
        super().__init__(**data)

class DiscoveryModuleInternalMessageBuses(BaseModel):
    buses: Optional[List[Bus]] = Field(None, description='(list)')


class Type(Enum):
    AVRO = 'AVRO'


class Topics(BaseModel):
    #id: Optional[id] = Field(None, description='topic id (leaf)')
    kafka_bus_name: Optional[str] = Field(
        None, description=' bus name (leaf)'
    )
    kafka_topic_name: Optional[str] = Field(None, description='topic name (leaf)')
    messageRetentionDuration: Optional[str] = Field(None, description='message rentention duration for topic (leaf)')
    topic_status: Optional[str] = Field(
        None, description='topic status. Example value: Active (leaf)'
    )
    created_by: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    updated_by: Optional[str] = Field(
        None, description='message bus updated by user (leaf)'
    )

class SchemaInfo(BaseModel):
    #id: Optional[id] = Field(None, description='topic id (leaf)')
    fed_kafkabus_id: Optional[int] = Field(
        None, description=' bus name (leaf)'
    )
    schema_name: Optional[str] = Field(
        None, description=' schema name (leaf)'
    )
    schema_type: Optional[str] = Field(None, description='schema type (leaf)')
    definition: Optional[str] = Field(
        None, description='topic status. Example value: Active (leaf)'
    )
    revisionId: Optional[str] = Field(
        None, description='topic status. Example value: Active (leaf)'
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='topic status. Example value: Active (leaf)'
    )
    created_by: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    updated_by: Optional[str] = Field(
        None, description='message bus updated by user (leaf)'
    )


#class SchemaInfo(BaseModel):
    #id: Optional[id] = Field(None, description='schema id (leaf)')
#    fed_kafkabus_id: Optional[id] = Field(None, description='kafka bus id (leaf)')
#    schema_name: Optional[str] = Field(
#        None, alias = 'schema', description=' schema name (leaf)'
#    )
#    schema_type: Optional[str] = Field(None, alias = 'AVRO', description='type of the schema (leaf)')
#    definition: Optional[str] = Field(
#        None, description='definition of the schema (leaf)'
#    )
#    revisionId: Optional[str] = Field(
#        None, description='Schema revision Id. Example value: 1.0 (leaf)'
#    )
#    revisionCreateTime: Optional[str] = Field(
#        None, description='schema revision creation time (leaf)'
#    )
#    created_by: Optional[str] = Field(
#        None, description='message bus creatred by user (leaf)'
#    )
#    updated_by: Optional[str] = Field(
#        None, description='message bus updated by user (leaf)'
#    )

class StatusEnum(str, Enum):
    Active: str = 'Active'
    Inactive: str = 'Inactive'
    Trash: str = 'Trash'


class DiscoveryModuleInternalSchemasInfo(BaseModel):
    schemas: Optional[List[SchemaInfo]] = Field(None, description='(list)')

class DiscoveryModuleFetchSchemaUsingSchemaInfoBusName(BaseModel):
    schema_name: str
    fed_kafka_bus_id: int

class DiscoveryModuleInternalDiscoveryScheduler(BaseModel):
    fed_kafka_bus_id: List[int] = Field(
        ...,
        description="List of bus id's to configure in a interval. Example value: [1,2,3,5] (leaf)",
    )
    schedular_status: Optional[StatusEnum] = Field(None, description='Discovery schdeuler status. Example value: Active (leaf)'
    )
    frequency: str = Field(...,
        description='Discovery schdeuler frequency. Example value: 14:15:20:05:00:00 (leaf)',
    )
    #schdeulercreatedtime: Optional[str] = Field(
    #    None, description='Discovery schdeuler created time (leaf)'
    #)
    created_by: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    updated_by: Optional[str] = Field(
        None, description='message bus updated by user (leaf)'
    )

    @validator('frequency')
    def validate_retention(cls, v):
        # Match for digits and a 's/m/h' unit at the end,
        frequency_re = re.compile(r'^(\d+|\d+\.\d+)[smh]$')
        match_check = frequency_re.match(v)
        if not match_check:
            raise ValueError('invalid frequency format, valid format is: "<int/float><s/m/h>"')

        elif float(match_check.group(1)) <= 0:
            raise ValueError('invalid frequency format, valid format is: "<int/float><s/m/h>" where <int/float> '
                             'should be grater than 0')

        return v


class DataPost(BaseModel):
    discovery_module_internal_message_buses: Optional[
        DiscoveryModuleInternalMessageBuses
    ] = Field(
        None,
        alias='discovery-module-internal:message-buses',
        description='(non-presence)',
    )
    discovery_module_internal_schemas_info: Optional[
        DiscoveryModuleInternalSchemasInfo
    ] = Field(
        None,
        alias='discovery-module-internal:schemas-info',
        description='(non-presence)',
    )
    discovery_module_internal_discovery_scheduler: Optional[
        DiscoveryModuleInternalDiscoveryScheduler
    ] = Field(
        None,
        alias='discovery-module-internal:discovery-scheduler',
        description='(non-presence)',
    )


class SecProtocol1(Enum):
    PLAINTEXT = 'PLAINTEXT'
    SSL = 'SSL'
    SASL_PLAINTEXT = 'SASL_PLAINTEXT'
    SASL_SSL = 'SASL_SSL'


class SaslMechanism1(Enum):
    GSSAPI = 'GSSAPI'
    PLAIN = 'PLAIN'
    SCRAM_SHA_256 = 'SCRAM-SHA-256'
    OAUTHBEARER = 'OAUTHBEARER'


class AuthSettings1(BaseModel):
    secProtocol: Optional[SecProtocol1] = Field(
        'PLAINTEXT',
        description='message bus instance auth protocol: PlAINTEXT/OAUTHBEARER/SCRAM/GSSAPI/kerberos/SASL/SSL/LDAP/keycloak (leaf)',
    )
    saslMechanism: Optional[SaslMechanism1] = Field('GSSAPI', description='(leaf)')
    keystoreLocation: Optional[str] = Field(None, description='(leaf)')
    keystorePassword: Optional[str] = Field(None, description='(leaf)')
    keyPassword: Optional[str] = Field(None, description='(leaf)')
    kerberosServiceName: Optional[str] = Field(None, description='(leaf)')
    principal: Optional[str] = Field(None, description='(leaf)')
    username: Optional[str] = Field(None, description='(leaf)')
    password: Optional[str] = Field(None, description='(leaf)')
    tokenEndpoint: Optional[str] = Field(None, description='(leaf)')


class Topic1(BaseModel):
    id: Optional[str] = Field(None, description='topic id (leaf)')
    topic: Optional[str] = Field(None, description='topic name (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )


class SchemaRegistry1(BaseModel):
    url: Optional[str] = Field(None, description='schema registry url (leaf)')
    Port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )


class Bus1(BaseModel):
    id: Optional[str] = Field(None, description='message bus id (leaf)')
    instanceType: Optional[str] = Field(
        None, description='message bus type. Example Kafka or RabbitMQ (leaf)'
    )
    host: Optional[str] = Field(None, description='message bus host name (leaf)')
    port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )
    authSettings: Optional[AuthSettings1] = Field(None, description='(non-presence)')
    createrdby: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    timestamp: Optional[str] = Field(
        None, description='message bus created time (leaf)'
    )
    topics: Optional[List[Topic1]] = Field(None, description='(list)')
    schema_registry: Optional[SchemaRegistry1] = Field(
        None,  description='(non-presence)'
    )


class DiscoveryModuleInternalMessageBuses1(BaseModel):
    buses: Optional[List[Bus1]] = Field(None, description='(list)')


class Type1(Enum):
    AVRO = 'AVRO'


class Schema1(BaseModel):
    id: Optional[str] = Field(None, description='schema id (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )
    type: Optional[Type1] = Field('AVRO', description='type of the schema (leaf)')
    definition: Optional[str] = Field(
        None, description='definition of the schema (leaf)'
    )
    revisionId: Optional[str] = Field(
        None, description='Schema revision Id. Example value: 1.0 (leaf)'
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='schema revision creation time (leaf)'
    )


class DiscoveryModuleInternalSchemasInfo1(BaseModel):
    schemas: Optional[List[Schema1]] = Field(None, description='(list)')


class DiscoveryModuleInternalDiscoveryScheduler1(BaseModel):
    schdeuler: Optional[int] = Field(
        None, description='ID of the discovery scheduler (leaf)'
    )
    bus_ids: Optional[str] = Field(
        None,
        description="List of bus id's to configure in a interval. Example value: [1,2,3,5] (leaf)",
    )
    status: Optional[str] = Field(
        None, description='Discovery schdeuler status. Example value: Active (leaf)'
    )
    frequency: Optional[str] = Field(
        None,
        description='Discovery schdeuler frequency. Example value: 14:15:20:05:00:00 (leaf)',
    )
    schdeulercreatedtime: Optional[str] = Field(
        None, description='Discovery schdeuler created time (leaf)'
    )


class IetfRestconfData(BaseModel):
    discovery_module_internal_message_buses: Optional[
        DiscoveryModuleInternalMessageBuses1
    ] = Field(
        None,
        alias='discovery-module-internal:message-buses',
        description='(non-presence)',
    )
    discovery_module_internal_schemas_info: Optional[
        DiscoveryModuleInternalSchemasInfo1
    ] = Field(
        None,
        alias='discovery-module-internal:schemas-info',
        description='(non-presence)',
    )
    discovery_module_internal_discovery_scheduler: Optional[
        DiscoveryModuleInternalDiscoveryScheduler1
    ] = Field(
        None,
        alias='discovery-module-internal:discovery-scheduler',
        description='(non-presence)',
    )


class DataPutPatch(BaseModel):
    ietf_restconf_data: Optional[IetfRestconfData] = Field(
        None,
        alias='ietf-restconf:data',
        description='This YANG module has been created for the purpose of the message-bus onboard entity.\nIt defines the model for onboarding a discovery-module-internal to TINAA ecosystem',
    )


class DiscoveryModuleInternalDiscoveryScheduler2(BaseModel):
    schdeuler: Optional[int] = Field(
        None, description='ID of the discovery scheduler (leaf)'
    )
    bus_ids: Optional[str] = Field(
        None,
        description="List of bus id's to configure in a interval. Example value: [1,2,3,5] (leaf)",
    )
    status: Optional[str] = Field(
        None, description='Discovery schdeuler status. Example value: Active (leaf)'
    )
    frequency: Optional[str] = Field(
        None,
        description='Discovery schdeuler frequency. Example value: 14:15:20:05:00:00 (leaf)',
    )
    schdeulercreatedtime: Optional[str] = Field(
        None, description='Discovery schdeuler created time (leaf)'
    )


class DataDiscoveryModuleInternalDiscoveryScheduler(BaseModel):
    discovery_module_internal_discovery_scheduler: Optional[
        DiscoveryModuleInternalDiscoveryScheduler2
    ] = Field(
        None,
        alias='discovery-module-internal:discovery-scheduler',
        description='(non-presence)',
    )


class DataDiscoveryModuleInternalDiscoverySchedulerPost(BaseModel):
    discovery_module_internal_schdeuler: Optional[int] = Field(
        None,
        alias='discovery-module-internal:schdeuler',
        description='ID of the discovery scheduler (leaf)',
    )
    discovery_module_internal_bus_ids: Optional[str] = Field(
        None,
        alias='discovery-module-internal:bus_ids',
        description="List of bus id's to configure in a interval. Example value: [1,2,3,5] (leaf)",
    )
    discovery_module_internal_status: Optional[str] = Field(
        None,
        alias='discovery-module-internal:status',
        description='Discovery schdeuler status. Example value: Active (leaf)',
    )
    discovery_module_internal_frequency: Optional[str] = Field(
        None,
        alias='discovery-module-internal:frequency',
        description='Discovery schdeuler frequency. Example value: 14:15:20:05:00:00 (leaf)',
    )
    discovery_module_internal_schdeulercreatedtime: Optional[str] = Field(
        None,
        alias='discovery-module-internal:schdeulercreatedtime',
        description='Discovery schdeuler created time (leaf)',
    )


class DataDiscoveryModuleInternalDiscoverySchedulerBusIds(BaseModel):
    discovery_module_internal_bus_ids: Optional[str] = Field(
        None,
        alias='discovery-module-internal:bus_ids',
        description="List of bus id's to configure in a interval. Example value: [1,2,3,5] (leaf)",
    )


class DataDiscoveryModuleInternalDiscoverySchedulerFrequency(BaseModel):
    discovery_module_internal_frequency: Optional[str] = Field(
        None,
        alias='discovery-module-internal:frequency',
        description='Discovery schdeuler frequency. Example value: 14:15:20:05:00:00 (leaf)',
    )


class DataDiscoveryModuleInternalDiscoverySchedulerSchdeuler(BaseModel):
    discovery_module_internal_schdeuler: Optional[int] = Field(
        None,
        alias='discovery-module-internal:schdeuler',
        description='ID of the discovery scheduler (leaf)',
    )


class DataDiscoveryModuleInternalDiscoverySchedulerSchdeulercreatedtime(BaseModel):
    discovery_module_internal_schdeulercreatedtime: Optional[str] = Field(
        None,
        alias='discovery-module-internal:schdeulercreatedtime',
        description='Discovery schdeuler created time (leaf)',
    )


class DataDiscoveryModuleInternalDiscoverySchedulerStatus(BaseModel):
    discovery_module_internal_status: Optional[str] = Field(
        None,
        alias='discovery-module-internal:status',
        description='Discovery schdeuler status. Example value: Active (leaf)',
    )


class SecProtocol2(Enum):
    PLAINTEXT = 'PLAINTEXT'
    SSL = 'SSL'
    SASL_PLAINTEXT = 'SASL_PLAINTEXT'
    SASL_SSL = 'SASL_SSL'


class SaslMechanism2(Enum):
    GSSAPI = 'GSSAPI'
    PLAIN = 'PLAIN'
    SCRAM_SHA_256 = 'SCRAM-SHA-256'
    OAUTHBEARER = 'OAUTHBEARER'


class AuthSettings2(BaseModel):
    secProtocol: Optional[SecProtocol2] = Field(
        'PLAINTEXT',
        description='message bus instance auth protocol: PlAINTEXT/OAUTHBEARER/SCRAM/GSSAPI/kerberos/SASL/SSL/LDAP/keycloak (leaf)',
    )
    saslMechanism: Optional[SaslMechanism2] = Field('GSSAPI', description='(leaf)')
    keystoreLocation: Optional[str] = Field(None, description='(leaf)')
    keystorePassword: Optional[str] = Field(None, description='(leaf)')
    keyPassword: Optional[str] = Field(None, description='(leaf)')
    kerberosServiceName: Optional[str] = Field(None, description='(leaf)')
    principal: Optional[str] = Field(None, description='(leaf)')
    username: Optional[str] = Field(None, description='(leaf)')
    password: Optional[str] = Field(None, description='(leaf)')
    tokenEndpoint: Optional[str] = Field(None, description='(leaf)')


class Topic2(BaseModel):
    id: Optional[str] = Field(None, description='topic id (leaf)')
    topic: Optional[str] = Field(None, description='topic name (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )


class SchemaRegistry2(BaseModel):
    url: Optional[str] = Field(None, description='schema registry url (leaf)')
    Port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )


class Bus2(BaseModel):
    id: Optional[str] = Field(None, description='message bus id (leaf)')
    instanceType: Optional[str] = Field(
        None, description='message bus type. Example Kafka or RabbitMQ (leaf)'
    )
    host: Optional[str] = Field(None, description='message bus host name (leaf)')
    port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )
    authSettings: Optional[AuthSettings2] = Field(None, description='(non-presence)')
    createrdby: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    timestamp: Optional[str] = Field(
        None, description='message bus created time (leaf)'
    )
    topics: Optional[List[Topic2]] = Field(None, description='(list)')
    schema_registry: Optional[SchemaRegistry2] = Field(
        None, alias='schema-registry', description='(non-presence)'
    )


class DiscoveryModuleInternalMessageBuses2(BaseModel):
    buses: Optional[List[Bus2]] = Field(None, description='(list)')


class DataDiscoveryModuleInternalMessageBuses(BaseModel):
    discovery_module_internal_message_buses: Optional[
        DiscoveryModuleInternalMessageBuses2
    ] = Field(
        None,
        alias='discovery-module-internal:message-buses',
        description='(non-presence)',
    )


class SecProtocol3(Enum):
    PLAINTEXT = 'PLAINTEXT'
    SSL = 'SSL'
    SASL_PLAINTEXT = 'SASL_PLAINTEXT'
    SASL_SSL = 'SASL_SSL'


class SaslMechanism3(Enum):
    GSSAPI = 'GSSAPI'
    PLAIN = 'PLAIN'
    SCRAM_SHA_256 = 'SCRAM-SHA-256'
    OAUTHBEARER = 'OAUTHBEARER'


class AuthSettings3(BaseModel):
    secProtocol: Optional[SecProtocol3] = Field(
        'PLAINTEXT',
        description='message bus instance auth protocol: PlAINTEXT/OAUTHBEARER/SCRAM/GSSAPI/kerberos/SASL/SSL/LDAP/keycloak (leaf)',
    )
    saslMechanism: Optional[SaslMechanism3] = Field('GSSAPI', description='(leaf)')
    keystoreLocation: Optional[str] = Field(None, description='(leaf)')
    keystorePassword: Optional[str] = Field(None, description='(leaf)')
    keyPassword: Optional[str] = Field(None, description='(leaf)')
    kerberosServiceName: Optional[str] = Field(None, description='(leaf)')
    principal: Optional[str] = Field(None, description='(leaf)')
    username: Optional[str] = Field(None, description='(leaf)')
    password: Optional[str] = Field(None, description='(leaf)')
    tokenEndpoint: Optional[str] = Field(None, description='(leaf)')


class Topic3(BaseModel):
    id: Optional[str] = Field(None, description='topic id (leaf)')
    topic: Optional[str] = Field(None, description='topic name (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )


class SchemaRegistry3(BaseModel):
    url: Optional[str] = Field(None, description='schema registry url (leaf)')
    Port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )


class DiscoveryModuleInternalBus(BaseModel):
    id: Optional[str] = Field(None, description='message bus id (leaf)')
    instanceType: Optional[str] = Field(
        None, description='message bus type. Example Kafka or RabbitMQ (leaf)'
    )
    host: Optional[str] = Field(None, description='message bus host name (leaf)')
    port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )
    authSettings: Optional[AuthSettings3] = Field(None, description='(non-presence)')
    createrdby: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    timestamp: Optional[str] = Field(
        None, description='message bus created time (leaf)'
    )
    topics: Optional[List[Topic3]] = Field(None, description='(list)')
    schema_registry: Optional[SchemaRegistry3] = Field(
        None, alias='schema-registry', description='(non-presence)'
    )


class DataDiscoveryModuleInternalMessageBusesPost(BaseModel):
    discovery_module_internal_buses: Optional[List[DiscoveryModuleInternalBus]] = Field(
        None, alias='discovery-module-internal:buses', description='(list)'
    )


class SecProtocol4(Enum):
    PLAINTEXT = 'PLAINTEXT'
    SSL = 'SSL'
    SASL_PLAINTEXT = 'SASL_PLAINTEXT'
    SASL_SSL = 'SASL_SSL'


class SaslMechanism4(Enum):
    GSSAPI = 'GSSAPI'
    PLAIN = 'PLAIN'
    SCRAM_SHA_256 = 'SCRAM-SHA-256'
    OAUTHBEARER = 'OAUTHBEARER'


class AuthSettings4(BaseModel):
    secProtocol: Optional[SecProtocol4] = Field(
        'PLAINTEXT',
        description='message bus instance auth protocol: PlAINTEXT/OAUTHBEARER/SCRAM/GSSAPI/kerberos/SASL/SSL/LDAP/keycloak (leaf)',
    )
    saslMechanism: Optional[SaslMechanism4] = Field('GSSAPI', description='(leaf)')
    keystoreLocation: Optional[str] = Field(None, description='(leaf)')
    keystorePassword: Optional[str] = Field(None, description='(leaf)')
    keyPassword: Optional[str] = Field(None, description='(leaf)')
    kerberosServiceName: Optional[str] = Field(None, description='(leaf)')
    principal: Optional[str] = Field(None, description='(leaf)')
    username: Optional[str] = Field(None, description='(leaf)')
    password: Optional[str] = Field(None, description='(leaf)')
    tokenEndpoint: Optional[str] = Field(None, description='(leaf)')


class Topic4(BaseModel):
    id: Optional[str] = Field(None, description='topic id (leaf)')
    topic: Optional[str] = Field(None, description='topic name (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )


class SchemaRegistry4(BaseModel):
    url: Optional[str] = Field(None, description='schema registry url (leaf)')
    Port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )


class DiscoveryModuleInternalBus1(BaseModel):
    id: Optional[str] = Field(None, description='message bus id (leaf)')
    instanceType: Optional[str] = Field(
        None, description='message bus type. Example Kafka or RabbitMQ (leaf)'
    )
    host: Optional[str] = Field(None, description='message bus host name (leaf)')
    port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )
    authSettings: Optional[AuthSettings4] = Field(None, description='(non-presence)')
    createrdby: Optional[str] = Field(
        None, description='message bus creatred by user (leaf)'
    )
    timestamp: Optional[str] = Field(
        None, description='message bus created time (leaf)'
    )
    topics: Optional[List[Topic4]] = Field(None, description='(list)')
    schema_registry: Optional[SchemaRegistry4] = Field(
        None, alias='schema-registry', description='(non-presence)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesId(BaseModel):
    discovery_module_internal_buses: Optional[
        List[DiscoveryModuleInternalBus1]
    ] = Field(None, alias='discovery-module-internal:buses', description='(list)')


class SecProtocol5(Enum):
    PLAINTEXT = 'PLAINTEXT'
    SSL = 'SSL'
    SASL_PLAINTEXT = 'SASL_PLAINTEXT'
    SASL_SSL = 'SASL_SSL'


class SaslMechanism5(Enum):
    GSSAPI = 'GSSAPI'
    PLAIN = 'PLAIN'
    SCRAM_SHA_256 = 'SCRAM-SHA-256'
    OAUTHBEARER = 'OAUTHBEARER'


class DiscoveryModuleInternalAuthSettings(BaseModel):
    secProtocol: Optional[SecProtocol5] = Field(
        'PLAINTEXT',
        description='message bus instance auth protocol: PlAINTEXT/OAUTHBEARER/SCRAM/GSSAPI/kerberos/SASL/SSL/LDAP/keycloak (leaf)',
    )
    saslMechanism: Optional[SaslMechanism5] = Field('GSSAPI', description='(leaf)')
    keystoreLocation: Optional[str] = Field(None, description='(leaf)')
    keystorePassword: Optional[str] = Field(None, description='(leaf)')
    keyPassword: Optional[str] = Field(None, description='(leaf)')
    kerberosServiceName: Optional[str] = Field(None, description='(leaf)')
    principal: Optional[str] = Field(None, description='(leaf)')
    username: Optional[str] = Field(None, description='(leaf)')
    password: Optional[str] = Field(None, description='(leaf)')
    tokenEndpoint: Optional[str] = Field(None, description='(leaf)')


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettings(BaseModel):
    discovery_module_internal_authSettings: Optional[
        DiscoveryModuleInternalAuthSettings
    ] = Field(
        None,
        alias='discovery-module-internal:authSettings',
        description='(non-presence)',
    )


class DiscoveryModuleInternalSecProtocol(Enum):
    PLAINTEXT = 'PLAINTEXT'
    SSL = 'SSL'
    SASL_PLAINTEXT = 'SASL_PLAINTEXT'
    SASL_SSL = 'SASL_SSL'


class DiscoveryModuleInternalSaslMechanism(Enum):
    GSSAPI = 'GSSAPI'
    PLAIN = 'PLAIN'
    SCRAM_SHA_256 = 'SCRAM-SHA-256'
    OAUTHBEARER = 'OAUTHBEARER'


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsPost(BaseModel):
    discovery_module_internal_secProtocol: Optional[
        DiscoveryModuleInternalSecProtocol
    ] = Field(
        'PLAINTEXT',
        alias='discovery-module-internal:secProtocol',
        description='message bus instance auth protocol: PlAINTEXT/OAUTHBEARER/SCRAM/GSSAPI/kerberos/SASL/SSL/LDAP/keycloak (leaf)',
    )
    discovery_module_internal_saslMechanism: Optional[
        DiscoveryModuleInternalSaslMechanism
    ] = Field(
        'GSSAPI', alias='discovery-module-internal:saslMechanism', description='(leaf)'
    )
    discovery_module_internal_keystoreLocation: Optional[str] = Field(
        None, alias='discovery-module-internal:keystoreLocation', description='(leaf)'
    )
    discovery_module_internal_keystorePassword: Optional[str] = Field(
        None, alias='discovery-module-internal:keystorePassword', description='(leaf)'
    )
    discovery_module_internal_keyPassword: Optional[str] = Field(
        None, alias='discovery-module-internal:keyPassword', description='(leaf)'
    )
    discovery_module_internal_kerberosServiceName: Optional[str] = Field(
        None,
        alias='discovery-module-internal:kerberosServiceName',
        description='(leaf)',
    )
    discovery_module_internal_principal: Optional[str] = Field(
        None, alias='discovery-module-internal:principal', description='(leaf)'
    )
    discovery_module_internal_username: Optional[str] = Field(
        None, alias='discovery-module-internal:username', description='(leaf)'
    )
    discovery_module_internal_password: Optional[str] = Field(
        None, alias='discovery-module-internal:password', description='(leaf)'
    )
    discovery_module_internal_tokenEndpoint: Optional[str] = Field(
        None, alias='discovery-module-internal:tokenEndpoint', description='(leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsKerberosServiceName(
    BaseModel
):
    discovery_module_internal_kerberosServiceName: Optional[str] = Field(
        None,
        alias='discovery-module-internal:kerberosServiceName',
        description='(leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsKeyPassword(
    BaseModel
):
    discovery_module_internal_keyPassword: Optional[str] = Field(
        None, alias='discovery-module-internal:keyPassword', description='(leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsKeystoreLocation(
    BaseModel
):
    discovery_module_internal_keystoreLocation: Optional[str] = Field(
        None, alias='discovery-module-internal:keystoreLocation', description='(leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsKeystorePassword(
    BaseModel
):
    discovery_module_internal_keystorePassword: Optional[str] = Field(
        None, alias='discovery-module-internal:keystorePassword', description='(leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsPassword(
    BaseModel
):
    discovery_module_internal_password: Optional[str] = Field(
        None, alias='discovery-module-internal:password', description='(leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsPrincipal(
    BaseModel
):
    discovery_module_internal_principal: Optional[str] = Field(
        None, alias='discovery-module-internal:principal', description='(leaf)'
    )


class DiscoveryModuleInternalSaslMechanism1(Enum):
    GSSAPI = 'GSSAPI'
    PLAIN = 'PLAIN'
    SCRAM_SHA_256 = 'SCRAM-SHA-256'
    OAUTHBEARER = 'OAUTHBEARER'


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsSaslMechanism(
    BaseModel
):
    discovery_module_internal_saslMechanism: Optional[
        DiscoveryModuleInternalSaslMechanism1
    ] = Field(
        'GSSAPI', alias='discovery-module-internal:saslMechanism', description='(leaf)'
    )


class DiscoveryModuleInternalSecProtocol1(Enum):
    PLAINTEXT = 'PLAINTEXT'
    SSL = 'SSL'
    SASL_PLAINTEXT = 'SASL_PLAINTEXT'
    SASL_SSL = 'SASL_SSL'


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsSecProtocol(
    BaseModel
):
    discovery_module_internal_secProtocol: Optional[
        DiscoveryModuleInternalSecProtocol1
    ] = Field(
        'PLAINTEXT',
        alias='discovery-module-internal:secProtocol',
        description='message bus instance auth protocol: PlAINTEXT/OAUTHBEARER/SCRAM/GSSAPI/kerberos/SASL/SSL/LDAP/keycloak (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsTokenEndpoint(
    BaseModel
):
    discovery_module_internal_tokenEndpoint: Optional[str] = Field(
        None, alias='discovery-module-internal:tokenEndpoint', description='(leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdAuthSettingsUsername(
    BaseModel
):
    discovery_module_internal_username: Optional[str] = Field(
        None, alias='discovery-module-internal:username', description='(leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdCreaterdby(BaseModel):
    discovery_module_internal_createrdby: Optional[str] = Field(
        None,
        alias='discovery-module-internal:createrdby',
        description='message bus creatred by user (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdHost(BaseModel):
    discovery_module_internal_host: Optional[str] = Field(
        None,
        alias='discovery-module-internal:host',
        description='message bus host name (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdId(BaseModel):
    discovery_module_internal_id: Optional[str] = Field(
        None, alias='discovery-module-internal:id', description='message bus id (leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdInstanceType(BaseModel):
    discovery_module_internal_instanceType: Optional[str] = Field(
        None,
        alias='discovery-module-internal:instanceType',
        description='message bus type. Example Kafka or RabbitMQ (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdPort(BaseModel):
    discovery_module_internal_port: Optional[int] = Field(
        None,
        alias='discovery-module-internal:port',
        description='message bus instance port. Example value: 9092 (leaf)',
    )


class DiscoveryModuleInternalSchemaRegistry(BaseModel):
    url: Optional[str] = Field(None, description='schema registry url (leaf)')
    Port: Optional[int] = Field(
        None, description='message bus instance port. Example value: 9092 (leaf)'
    )
    version: Optional[str] = Field(
        None, description='message bus instance version. Example value: 3.3 (leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdSchemaRegistry(BaseModel):
    discovery_module_internal_schema_registry: Optional[
        DiscoveryModuleInternalSchemaRegistry
    ] = Field(
        None,
        alias='discovery-module-internal:schema-registry',
        description='(non-presence)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdSchemaRegistryPost(BaseModel):
    discovery_module_internal_url: Optional[str] = Field(
        None,
        alias='discovery-module-internal:url',
        description='schema registry url (leaf)',
    )
    discovery_module_internal_Port: Optional[int] = Field(
        None,
        alias='discovery-module-internal:Port',
        description='message bus instance port. Example value: 9092 (leaf)',
    )
    discovery_module_internal_version: Optional[str] = Field(
        None,
        alias='discovery-module-internal:version',
        description='message bus instance version. Example value: 3.3 (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdSchemaRegistryPort(BaseModel):
    discovery_module_internal_Port: Optional[int] = Field(
        None,
        alias='discovery-module-internal:Port',
        description='message bus instance port. Example value: 9092 (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdSchemaRegistryUrl(BaseModel):
    discovery_module_internal_url: Optional[str] = Field(
        None,
        alias='discovery-module-internal:url',
        description='schema registry url (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdSchemaRegistryVersion(
    BaseModel
):
    discovery_module_internal_version: Optional[str] = Field(
        None,
        alias='discovery-module-internal:version',
        description='message bus instance version. Example value: 3.3 (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdTimestamp(BaseModel):
    discovery_module_internal_timestamp: Optional[str] = Field(
        None,
        alias='discovery-module-internal:timestamp',
        description='message bus created time (leaf)',
    )


class DiscoveryModuleInternalTopic(BaseModel):
    id: Optional[str] = Field(None, description='topic id (leaf)')
    topic: Optional[str] = Field(None, description='topic name (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdTopicsTopicsId(BaseModel):
    discovery_module_internal_topics: Optional[
        List[DiscoveryModuleInternalTopic]
    ] = Field(None, alias='discovery-module-internal:topics', description='(list)')


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdTopicsTopicsIdId(BaseModel):
    discovery_module_internal_id: Optional[str] = Field(
        None, alias='discovery-module-internal:id', description='topic id (leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdTopicsTopicsIdSchema(
    BaseModel
):
    discovery_module_internal_schema: Optional[str] = Field(
        None,
        alias='discovery-module-internal:schema',
        description=' schema name (leaf)',
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdTopicsTopicsIdTopic(BaseModel):
    discovery_module_internal_topic: Optional[str] = Field(
        None, alias='discovery-module-internal:topic', description='topic name (leaf)'
    )


class DataDiscoveryModuleInternalMessageBusesBusesBusesIdVersion(BaseModel):
    discovery_module_internal_version: Optional[str] = Field(
        None,
        alias='discovery-module-internal:version',
        description='message bus instance version. Example value: 3.3 (leaf)',
    )


class Type2(Enum):
    AVRO = 'AVRO'


class Schema2(BaseModel):
    id: Optional[str] = Field(None, description='schema id (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )
    type: Optional[Type2] = Field('AVRO', description='type of the schema (leaf)')
    definition: Optional[str] = Field(
        None, description='definition of the schema (leaf)'
    )
    revisionId: Optional[str] = Field(
        None, description='Schema revision Id. Example value: 1.0 (leaf)'
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='schema revision creation time (leaf)'
    )


class DiscoveryModuleInternalSchemasInfo2(BaseModel):
    schemas: Optional[List[Schema2]] = Field(None, description='(list)')


class DataDiscoveryModuleInternalSchemasInfo(BaseModel):
    discovery_module_internal_schemas_info: Optional[
        DiscoveryModuleInternalSchemasInfo2
    ] = Field(
        None,
        alias='discovery-module-internal:schemas-info',
        description='(non-presence)',
    )


class Type3(Enum):
    AVRO = 'AVRO'


class DiscoveryModuleInternalSchema(BaseModel):
    id: Optional[str] = Field(None, description='schema id (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )
    type: Optional[Type3] = Field('AVRO', description='type of the schema (leaf)')
    definition: Optional[str] = Field(
        None, description='definition of the schema (leaf)'
    )
    revisionId: Optional[str] = Field(
        None, description='Schema revision Id. Example value: 1.0 (leaf)'
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='schema revision creation time (leaf)'
    )


class DataDiscoveryModuleInternalSchemasInfoPost(BaseModel):
    discovery_module_internal_schemas: Optional[
        List[DiscoveryModuleInternalSchema]
    ] = Field(None, alias='discovery-module-internal:schemas', description='(list)')


class Type4(Enum):
    AVRO = 'AVRO'


class DiscoveryModuleInternalSchema1(BaseModel):
    id: Optional[str] = Field(None, description='schema id (leaf)')
    schema_: Optional[str] = Field(
        None, alias='schema', description=' schema name (leaf)'
    )
    type: Optional[Type4] = Field('AVRO', description='type of the schema (leaf)')
    definition: Optional[str] = Field(
        None, description='definition of the schema (leaf)'
    )
    revisionId: Optional[str] = Field(
        None, description='Schema revision Id. Example value: 1.0 (leaf)'
    )
    revisionCreateTime: Optional[str] = Field(
        None, description='schema revision creation time (leaf)'
    )


class DataDiscoveryModuleInternalSchemasInfoSchemasSchemasId(BaseModel):
    discovery_module_internal_schemas: Optional[
        List[DiscoveryModuleInternalSchema1]
    ] = Field(None, alias='discovery-module-internal:schemas', description='(list)')


class DataDiscoveryModuleInternalSchemasInfoSchemasSchemasIdDefinition(BaseModel):
    discovery_module_internal_definition: Optional[str] = Field(
        None,
        alias='discovery-module-internal:definition',
        description='definition of the schema (leaf)',
    )


class DataDiscoveryModuleInternalSchemasInfoSchemasSchemasIdId(BaseModel):
    discovery_module_internal_id: Optional[str] = Field(
        None, alias='discovery-module-internal:id', description='schema id (leaf)'
    )


class DataDiscoveryModuleInternalSchemasInfoSchemasSchemasIdRevisionCreateTime(
    BaseModel
):
    discovery_module_internal_revisionCreateTime: Optional[str] = Field(
        None,
        alias='discovery-module-internal:revisionCreateTime',
        description='schema revision creation time (leaf)',
    )


class DataDiscoveryModuleInternalSchemasInfoSchemasSchemasIdRevisionId(BaseModel):
    discovery_module_internal_revisionId: Optional[str] = Field(
        None,
        alias='discovery-module-internal:revisionId',
        description='Schema revision Id. Example value: 1.0 (leaf)',
    )


class DataDiscoveryModuleInternalSchemasInfoSchemasSchemasIdSchema(BaseModel):
    discovery_module_internal_schema: Optional[str] = Field(
        None,
        alias='discovery-module-internal:schema',
        description=' schema name (leaf)',
    )


class DiscoveryModuleInternalType(Enum):
    AVRO = 'AVRO'


class DataDiscoveryModuleInternalSchemasInfoSchemasSchemasIdType(BaseModel):
    discovery_module_internal_type: Optional[DiscoveryModuleInternalType] = Field(
        'AVRO',
        alias='discovery-module-internal:type',
        description='type of the schema (leaf)',
    )


class WithDefaults(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults1(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults2(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults3(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content1(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults4(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults5(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Insert(Enum):
    first = 'first'
    last = 'last'
    before = 'before'
    after = 'after'


class Insert1(Enum):
    first = 'first'
    last = 'last'
    before = 'before'
    after = 'after'


class WithDefaults6(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content2(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults7(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults8(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults9(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content3(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults10(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults11(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults12(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content4(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults13(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults14(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults15(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content5(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults16(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults17(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults18(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content6(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults19(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults20(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults21(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content7(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults22(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults23(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults24(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content8(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults25(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults26(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults27(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content9(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults28(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults29(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults30(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content10(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults31(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults32(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults33(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content11(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults34(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults35(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults36(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content12(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults37(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults38(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults39(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content13(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults40(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults41(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults42(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content14(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults43(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults44(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults45(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content15(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults46(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults47(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults48(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content16(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults49(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults50(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults51(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content17(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults52(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults53(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults54(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content18(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults55(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults56(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults57(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content19(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults58(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults59(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults60(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content20(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults61(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults62(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Insert2(Enum):
    first = 'first'
    last = 'last'
    before = 'before'
    after = 'after'


class Insert3(Enum):
    first = 'first'
    last = 'last'
    before = 'before'
    after = 'after'


class WithDefaults63(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content21(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults64(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults65(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults66(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content22(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults67(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults68(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults69(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content23(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults70(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults71(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults72(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content24(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults73(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults74(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults75(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content25(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults76(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults77(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults78(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content26(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults79(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults80(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults81(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content27(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults82(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults83(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults84(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content28(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults85(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults86(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults87(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content29(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults88(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults89(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Insert4(Enum):
    first = 'first'
    last = 'last'
    before = 'before'
    after = 'after'


class Insert5(Enum):
    first = 'first'
    last = 'last'
    before = 'before'
    after = 'after'


class WithDefaults90(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content30(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults91(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults92(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults93(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content31(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults94(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults95(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults96(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content32(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults97(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults98(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults99(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content33(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults100(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults101(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults102(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content34(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults103(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults104(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults105(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content35(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults106(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults107(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults108(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content36(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults109(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults110(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults111(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content37(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults112(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults113(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults114(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content38(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults115(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults116(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults117(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content39(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults118(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults119(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults120(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content40(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults121(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults122(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults123(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class Content41(Enum):
    config = 'config'
    nonconfig = 'nonconfig'
    all = 'all'


class WithDefaults124(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'


class WithDefaults125(Enum):
    report_all = 'report-all'
    trim = 'trim'
    explicit = 'explicit'
    report_all_tagged = 'report-all-tagged'
